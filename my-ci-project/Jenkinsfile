// Load the local shared library (defined in the same repo)
@Library('my-local-lib') _
import org.example.MathUtils
import org.example.Deployer

pipeline {
    agent any

    environment {
        CRED_ID = credentials('mahmoudN')  // Automatically binds username/password
        GREETING = 'Hello DUDE!'
    }
    
    parameters {
        string(name: 'BRANCH_FILE', defaultValue: 'DEV', description: 'testing')
        string(name: 'USERNAME', defaultValue: 'Mahmoud', description: 'Who are we greeting?')
    }

    // tools {
    //    python 'Python3.9'  // Refers to the name you gave in the Jenkins UI
   // }

    stages {

        stage('Checkout') { //not needed here, didnt work maybe multibranch project
            steps {
                git branch: 'test', url: 'https://github.com/MahmoudNobani/jenkins.git'
            }
        }

        stage('Show Credentials') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'mahmoudN', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "Username: $USERNAME"
                        echo "Password: $PASSWORD"
                    '''
                }
            
                echo "Using credentials..."
                echo "Username: ${env.CRED_ID_USR}"
            }
        }

        stage('Check Python Version') {
            steps {
                sh 'python --version'
                script {
                    def lsOut = sh(script: 'ls', returnStdout: true)
                    echo "${lsOut}"
                }
            }
        }

        stage('Greet') {
            steps {
                script {
                    sayHello.whereAreU('away')  // Allowed inside script block
                }
                sayHello('Mahmoud') // Uses vars/sayHello.groovy allowed
                sayHello("${currentBuild.number}") // allowed
                //sayHello.whereAreU('away') //not allowed
            }
        }

        stage('Math') {
            steps {
                script {
                    def result = MathUtils.square(6) //need script{}
                    echo "6 squared is ${result}"
                }
            }
        }

        stage('deployer') {
            steps {
                script {
                    def deployer = new Deployer(this) 
                    deployer.callMe()
                }
            }
        }

        
        stage('Build Info') {
            steps {
                script {
                    sayHello("${currentBuild.number}")
                    echo "ðŸ”§ Build Number: ${currentBuild.number}"
                }
            }
        }

        stage('Trigger Downstream Pipeline') {
            steps {
                script {
                    // Run downstream job with parameters
                    def downstreamBuild = build(
                        job: 'downstream',   // Must match exact Jenkins job name (should exist in jenkins before running)
                        parameters: [
                            string(name: 'NAME', value: 'Mahmoud Nobani'),
                            booleanParam(name: 'DO_EXTRA', value: true)
                        ],
                        wait: true,      // Wait until downstream finishes
                        propagate: true  // Fail main job if downstream fails
                    )

                    // Log downstream result
                    echo "Downstream build number: ${downstreamBuild.number}"
                    echo "Downstream build result: ${downstreamBuild.result}"
                }
            }
        }

        stage('send to slack') {
            steps {
                script {
                    slackSend color: "good", message: "Message from me, hello Pipeline"
                }
            }
        }
        
    }

    
    post {
    always {
        mail to: 'tokyoghoulre123@gmail.com',
             cc: 'lead@example.com',
             bcc: 'audit@example.com',
             from: 'jenkins@example.com',
             replyTo: 'noreply@example.com',
             subject: "HELLO ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${currentBuild.currentResult}",
             body: """
                    Hello Team,

                    Build Details:
                    - Job: ${env.JOB_NAME}
                    - Build Number: ${env.BUILD_NUMBER}
                    - Result: ${currentBuild.currentResult}
                    - URL: ${env.BUILD_URL}

                    Regards,
                    Jenkins
                    """,
             charset: 'UTF-8'
        }
    }
}
